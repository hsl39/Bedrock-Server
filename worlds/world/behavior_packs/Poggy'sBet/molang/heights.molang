//this is an implementation of voronoi cells with edge distances

//outputs:
//t.d, distance to biome edge
//t.r, biome identifier (a number from 0 to 1)
//t.biome_idx, biome index, determines which biome goes where

//coords for noise function
v.px = v.originx/16/t.scale;
v.pz = v.originz/16/t.scale;
//offset to add biome blending / fix straight lines
v.o = (q.noise(v.originx/t.primary_edge_noise_scale + 100, v.originz/t.primary_edge_noise_scale + 100)*t.primary_edge_noise_amplitude + q.noise(v.originx/t.secondary_edge_noise_scale + 100, v.originz/t.secondary_edge_noise_scale + 100)*t.secondary_edge_noise_amplitude)*math.min(0.5 - math.abs(v.px - math.floor(v.px) - 0.5),0.5 - math.abs(v.pz - math.floor(v.pz) - 0.5));
v.px = v.px + v.o;
v.pz = v.pz + v.o;

//voronoi noise generator
//loop init
t.r = 0;
v.n1 = 999;
v.n2 = 999;
v.i = 0;
loop(9,{
    //get cell offset
    v.x = math.mod(v.i,3) - 1;
    v.z = math.floor(v.i/3) - 1;

    //get cell coords
    v.p2x = math.floor(v.px) + v.x;
    v.p2z = math.floor(v.pz) + v.z;

    //retrieve random numbers
    (v.i == 0) ? {
        v.rx = t.rx0;
        v.rz = t.rz0;
    } : { (v.i == 1) ? {
        v.rx = t.rx1;
        v.rz = t.rz1;
    } : { (v.i == 2) ? {
        v.rx = t.rx2;
        v.rz = t.rz2;
    } : { (v.i == 3) ? {
        v.rx = t.rx3;
        v.rz = t.rz3;
    } : { (v.i == 4) ? {
        v.rx = t.rx4;
        v.rz = t.rz4;
    } : { (v.i == 5) ? {
        v.rx = t.rx5;
        v.rz = t.rz5;
    } : { (v.i == 6) ? {
        v.rx = t.rx6;
        v.rz = t.rz6;
    } : { (v.i == 7) ? {
        v.rx = t.rx7;
        v.rz = t.rz7;
    } : {
        v.rx = t.rx8;
        v.rz = t.rz8;
    };};};};};};};};

    //distance
    v.d4x = v.p2x + v.rx - v.px;
    v.d4z = v.p2z + v.rz - v.pz;
    v.d2 = v.d4x*v.d4x + v.d4z*v.d4z;
        
    //update loop vars
    (v.d2 < v.n1) ? {
        v.n2 = v.n1;
        v.n1 = v.d2;
        t.r = v.rx;
    } : {
        (v.d2 < v.n2) ? {
            v.n2 = v.d2;
        };
    };
    
    v.i = v.i + 1;
});

t.d = math.abs(math.sqrt(v.n2) - math.sqrt(v.n1));

t.biome_idx = math.floor(t.r*t.biomes);

//changes the max height based on which biome it is
t.biomeHeight = (t.biome_idx == 0) ? 20 : 
                (t.biome_idx == 1) ? 40 : 
                (t.biome_idx == 2) ? 5 : 
                (t.biome_idx == 3) ? 80 : 
                (t.biome_idx == 4) ? 10 : 
                (t.biome_idx == 5) ? -40 : 0;

//height of generated terrian + some noise
t.height = t.biomeHeight*t.d + q.noise(v.originx/t.secondary_height_offset_scale,v.originz/t.secondary_height_offset_scale)*t.secondary_height_offset_amplitude + q.noise(v.originx/t.primary_height_offset_scale + 200,v.originz/t.primary_height_offset_scale + 200)*t.primary_height_offset_amplitude;
return 1;